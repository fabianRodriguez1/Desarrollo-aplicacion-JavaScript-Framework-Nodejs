<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
    <file path="/home/manuel/Documents/github/node-express-boilerplate/tests/integration/user.test.js">
        <testCase name="User routes POST /v1/users should return 201 and successfully create new user if data is ok" duration="914"/>
        <testCase name="User routes POST /v1/users should be able to create an admin as well" duration="599"/>
        <testCase name="User routes POST /v1/users should return 401 error if access token is missing" duration="98"/>
        <testCase name="User routes POST /v1/users should return 403 error if logged in user is not admin" duration="282"/>
        <testCase name="User routes POST /v1/users should return 400 error if email is invalid" duration="310"/>
        <testCase name="User routes POST /v1/users should return 400 error if email is already used" duration="396"/>
        <testCase name="User routes POST /v1/users should return 400 error if password length is less than 8 characters" duration="270"/>
        <testCase name="User routes POST /v1/users should return 400 error if password does not contain both letters and numbers" duration="373"/>
        <testCase name="User routes POST /v1/users should return 400 error if role is neither user nor admin" duration="279"/>
        <testCase name="User routes GET /v1/users should return 200 and apply the default query options" duration="364"/>
        <testCase name="User routes GET /v1/users should return 401 if access token is missing" duration="212"/>
        <testCase name="User routes GET /v1/users should return 403 if a non-admin is trying to access all users" duration="283"/>
        <testCase name="User routes GET /v1/users should correctly apply filter on name field" duration="364"/>
        <testCase name="User routes GET /v1/users should correctly apply filter on role field" duration="413"/>
        <testCase name="User routes GET /v1/users should correctly sort the returned array if descending sort param is specified" duration="355"/>
        <testCase name="User routes GET /v1/users should correctly sort the returned array if ascending sort param is specified" duration="387"/>
        <testCase name="User routes GET /v1/users should correctly sort the returned array if multiple sorting criteria are specified" duration="385"/>
        <testCase name="User routes GET /v1/users should limit returned array if limit param is specified" duration="379"/>
        <testCase name="User routes GET /v1/users should return the correct page if page and limit params are specified" duration="357"/>
        <testCase name="User routes GET /v1/users/:userId should return 200 and the user object if data is ok" duration="360"/>
        <testCase name="User routes GET /v1/users/:userId should return 401 error if access token is missing" duration="177"/>
        <testCase name="User routes GET /v1/users/:userId should return 403 error if user is trying to get another user" duration="262"/>
        <testCase name="User routes GET /v1/users/:userId should return 200 and the user object if admin is trying to get another user" duration="376"/>
        <testCase name="User routes GET /v1/users/:userId should return 400 error if userId is not a valid mongo id" duration="288"/>
        <testCase name="User routes GET /v1/users/:userId should return 404 error if user is not found" duration="364"/>
        <testCase name="User routes DELETE /v1/users/:userId should return 204 if data is ok" duration="587"/>
        <testCase name="User routes DELETE /v1/users/:userId should return 401 error if access token is missing" duration="188"/>
        <testCase name="User routes DELETE /v1/users/:userId should return 403 error if user is trying to delete another user" duration="270"/>
        <testCase name="User routes DELETE /v1/users/:userId should return 204 if admin is trying to delete another user" duration="478"/>
        <testCase name="User routes DELETE /v1/users/:userId should return 400 error if userId is not a valid mongo id" duration="289"/>
        <testCase name="User routes DELETE /v1/users/:userId should return 404 error if user already is not found" duration="411"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 200 and successfully update user if data is ok" duration="801"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 401 error if access token is missing" duration="190"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 403 if user is updating another user" duration="268"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 200 and successfully update user if admin is updating another user" duration="457"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 404 if admin is updating another user that is not found" duration="365"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 400 error if userId is not a valid mongo id" duration="261"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 400 if email is invalid" duration="284"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 400 if email is already taken" duration="438"/>
        <testCase name="User routes PATCH /v1/users/:userId should not return 400 if email is my email" duration="555"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 400 if password length is less than 8 characters" duration="262"/>
        <testCase name="User routes PATCH /v1/users/:userId should return 400 if password does not contain both letters and numbers" duration="374"/>
    </file>
    <file path="/home/manuel/Documents/github/node-express-boilerplate/tests/integration/auth.test.js">
        <testCase name="Auth routes POST /v1/auth/register should return 201 and successfully register user if request data is ok" duration="800"/>
        <testCase name="Auth routes POST /v1/auth/register should return 400 error if email is invalid" duration="90"/>
        <testCase name="Auth routes POST /v1/auth/register should return 400 error if email is already used" duration="276"/>
        <testCase name="Auth routes POST /v1/auth/register should return 400 error if password length is less than 8 characters" duration="100"/>
        <testCase name="Auth routes POST /v1/auth/register should return 400 error if password does not contain both letters and numbers" duration="100"/>
        <testCase name="Auth routes POST /v1/auth/login should return 200 and login user if email and password match" duration="395"/>
        <testCase name="Auth routes POST /v1/auth/login should return 401 error if there are no users with that email" duration="195"/>
        <testCase name="Auth routes POST /v1/auth/login should return 401 error if password is wrong" duration="300"/>
        <testCase name="Auth routes POST /v1/auth/logout should return 204 if refresh token is valid" duration="549"/>
        <testCase name="Auth routes POST /v1/auth/logout should return 400 error if refresh token is missing from request body" duration="97"/>
        <testCase name="Auth routes POST /v1/auth/logout should return 404 error if refresh token is not found in the database" duration="271"/>
        <testCase name="Auth routes POST /v1/auth/logout should return 404 error if refresh token is blacklisted" duration="366"/>
        <testCase name="Auth routes POST /v1/auth/refresh-tokens should return 200 and new auth tokens if refresh token is valid" duration="829"/>
        <testCase name="Auth routes POST /v1/auth/refresh-tokens should return 400 error if refresh token is missing from request body" duration="101"/>
        <testCase name="Auth routes POST /v1/auth/refresh-tokens should return 401 error if refresh token is signed using an invalid secret" duration="283"/>
        <testCase name="Auth routes POST /v1/auth/refresh-tokens should return 401 error if refresh token is not found in the database" duration="269"/>
        <testCase name="Auth routes POST /v1/auth/refresh-tokens should return 401 error if refresh token is blacklisted" duration="367"/>
        <testCase name="Auth routes POST /v1/auth/refresh-tokens should return 401 error if refresh token is expired" duration="267"/>
        <testCase name="Auth routes POST /v1/auth/refresh-tokens should return 401 error if user is not found" duration="372"/>
        <testCase name="Auth routes POST /v1/auth/forgot-password should return 204 and send reset password email to the user" duration="468"/>
        <testCase name="Auth routes POST /v1/auth/forgot-password should return 400 if email is missing" duration="197"/>
        <testCase name="Auth routes POST /v1/auth/forgot-password should return 404 if email does not belong to any user" duration="194"/>
        <testCase name="Auth routes POST /v1/auth/reset-password should return 204 and reset the password" duration="979"/>
        <testCase name="Auth routes POST /v1/auth/reset-password should return 400 if reset password token is missing" duration="183"/>
        <testCase name="Auth routes POST /v1/auth/reset-password should return 401 if reset password token is blacklisted" duration="386"/>
        <testCase name="Auth routes POST /v1/auth/reset-password should return 401 if reset password token is expired" duration="298"/>
        <testCase name="Auth routes POST /v1/auth/reset-password should return 401 if user is not found" duration="393"/>
        <testCase name="Auth routes POST /v1/auth/reset-password should return 400 if password is missing or invalid" duration="306"/>
        <testCase name="Auth routes POST /v1/auth/send-verification-email should return 204 and send verification email to the user" duration="448"/>
        <testCase name="Auth routes POST /v1/auth/send-verification-email should return 401 error if access token is missing" duration="179"/>
        <testCase name="Auth routes POST /v1/auth/verify-email should return 204 and verify the email" duration="892"/>
        <testCase name="Auth routes POST /v1/auth/verify-email should return 400 if verify email token is missing" duration="183"/>
        <testCase name="Auth routes POST /v1/auth/verify-email should return 401 if verify email token is blacklisted" duration="358"/>
        <testCase name="Auth routes POST /v1/auth/verify-email should return 401 if verify email token is expired" duration="271"/>
        <testCase name="Auth routes POST /v1/auth/verify-email should return 401 if user is not found" duration="364"/>
        <testCase name="Auth middleware should call next with no errors if access token is valid" duration="262"/>
        <testCase name="Auth middleware should call next with unauthorized error if access token is not found in header" duration="178"/>
        <testCase name="Auth middleware should call next with unauthorized error if access token is not a valid jwt token" duration="182"/>
        <testCase name="Auth middleware should call next with unauthorized error if the token is not an access token" duration="177"/>
        <testCase name="Auth middleware should call next with unauthorized error if access token is generated with an invalid secret" duration="173"/>
        <testCase name="Auth middleware should call next with unauthorized error if access token is expired" duration="178"/>
        <testCase name="Auth middleware should call next with unauthorized error if user is not found" duration="171"/>
        <testCase name="Auth middleware should call next with forbidden error if user does not have required rights and userId is not in params" duration="261"/>
        <testCase name="Auth middleware should call next with no errors if user does not have required rights but userId is in params" duration="280"/>
        <testCase name="Auth middleware should call next with no errors if user has required rights" duration="269"/>
    </file>
    <file path="/home/manuel/Documents/github/node-express-boilerplate/tests/unit/models/plugins/paginate.plugin.test.js">
        <testCase name="paginate plugin populate option should populate the specified data fields" duration="672"/>
        <testCase name="paginate plugin populate option should populate nested fields" duration="561"/>
    </file>
    <file path="/home/manuel/Documents/github/node-express-boilerplate/tests/integration/docs.test.js">
        <testCase name="Auth routes GET /v1/docs should return 404 when running in production" duration="14"/>
    </file>
    <file path="/home/manuel/Documents/github/node-express-boilerplate/tests/unit/models/user.model.test.js">
        <testCase name="User model User validation should correctly validate a valid user" duration="8"/>
        <testCase name="User model User validation should throw a validation error if email is invalid" duration="3"/>
        <testCase name="User model User validation should throw a validation error if password length is less than 8 characters" duration="3"/>
        <testCase name="User model User validation should throw a validation error if password does not contain numbers" duration="1"/>
        <testCase name="User model User validation should throw a validation error if password does not contain letters" duration="1"/>
        <testCase name="User model User validation should throw a validation error if role is unknown" duration="1"/>
        <testCase name="User model User toJSON() should not return user password when toJSON is called" duration="1"/>
    </file>
    <file path="/home/manuel/Documents/github/node-express-boilerplate/tests/unit/middlewares/error.test.js">
        <testCase name="Error middlewares Error converter should return the same ApiError object it was called with" duration="3"/>
        <testCase name="Error middlewares Error converter should convert an Error to ApiError and preserve its status and message" duration="2"/>
        <testCase name="Error middlewares Error converter should convert an Error without status to ApiError with status 500" duration="1"/>
        <testCase name="Error middlewares Error converter should convert an Error without message to ApiError with default message of that http status" duration="1"/>
        <testCase name="Error middlewares Error converter should convert a Mongoose error to ApiError with status 400 and preserve its message" duration="0"/>
        <testCase name="Error middlewares Error converter should convert any other object to ApiError with status 500 and its message" duration="1"/>
        <testCase name="Error middlewares Error handler should send proper error response and put the error message in res.locals" duration="1"/>
        <testCase name="Error middlewares Error handler should put the error stack in the response if in development mode" duration="1"/>
        <testCase name="Error middlewares Error handler should send internal server error status and message if in production mode and error is not operational" duration="1"/>
        <testCase name="Error middlewares Error handler should preserve original error status and message if in production mode and error is operational" duration="0"/>
    </file>
    <file path="/home/manuel/Documents/github/node-express-boilerplate/tests/unit/models/plugins/toJSON.plugin.test.js">
        <testCase name="toJSON plugin should replace _id with id" duration="3"/>
        <testCase name="toJSON plugin should remove __v" duration="2"/>
        <testCase name="toJSON plugin should remove createdAt and updatedAt" duration="2"/>
        <testCase name="toJSON plugin should remove any path set as private" duration="2"/>
        <testCase name="toJSON plugin should remove any nested paths set as private" duration="2"/>
        <testCase name="toJSON plugin should also call the schema toJSON transform function" duration="2"/>
    </file>
</testExecutions>